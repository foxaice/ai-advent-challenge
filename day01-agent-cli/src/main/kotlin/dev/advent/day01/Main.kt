package dev.advent.day01

import dev.advent.core.agent.Agent
import dev.advent.core.agent.ToolRegistry
import dev.advent.core.tools.CalcTool
import dev.advent.providers.gemini.GeminiProvider
import kotlinx.coroutines.runBlocking
import org.slf4j.LoggerFactory

fun main() = runBlocking {
    val logger = LoggerFactory.getLogger("Main")
    logger.info("Starting AI Advent Day 1 CLI agent")

    println("üî• AI Advent ‚Äî Day 1 agent (Gemini via HTTP)\n")
    val provider = GeminiProvider()
    val model = System.getenv("GEMINI_MODEL") ?: "gemini-2.0-flash"
    logger.info("Using model: {}", model)

    val tools = ToolRegistry(listOf(CalcTool()))
    logger.info("Registered tools: {}", tools.declarations().map { it.name })

    val agent = Agent(
        provider = provider,
        model = model,
        tools = tools,
        systemInstruction = "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, —á—Ç–æ —Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã AI. –ï—Å–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω—É–∂–Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç calc –∏ –≤–µ—Ä–Ω–∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º.",
    )

    println("–ü–æ–¥—Å–∫–∞–∑–∫–∞: —Å–ø—Ä–æ—Å–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä: '—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç (12+3)*4?' –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏ 'exit' —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.\n")

    var loopCount = 0
    while (true) {
        loopCount++
        logger.debug("Input loop iteration: {}", loopCount)

        print("üë§ –í—ã: ")
        System.out.flush()

        val user = readlnOrNull()?.trim()
        logger.debug("Read input: user={}, isNull={}, isEmpty={}", user, user == null, user?.isEmpty())

        if (user == null) {
            logger.warn("readlnOrNull returned null, continuing...")
            continue
        }

        if (user.isEmpty()) {
            logger.debug("Empty input, skipping")
            continue
        }

        if (user.equals("exit", ignoreCase = true)) {
            logger.info("User requested exit")
            break
        }

        logger.info("Processing user input: {}", user)
        val answer = try {
            agent.chatOnce(user)
        } catch (e: Exception) {
            logger.error("Error during agent.chatOnce", e)
            "–û—à–∏–±–∫–∞: ${e.message}. –ü—Ä–æ–≤–µ—Ä—å GEMINI_API_KEY –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç."
        }
        println("ü§ñ –ê–≥–µ–Ω—Ç: $answer\n")
    }

    logger.info("Shutting down")
    println("–ü–æ–∫–∞! üëã")
}