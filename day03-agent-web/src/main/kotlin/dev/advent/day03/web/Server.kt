package dev.advent.day03.web

import dev.advent.core.agent.Agent
import dev.advent.core.agent.ToolRegistry
import dev.advent.core.llm.GenerationConfig
import dev.advent.providers.gemini.GeminiProvider
import io.ktor.server.application.*
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import io.ktor.server.plugins.contentnegotiation.*
import io.ktor.server.plugins.cors.routing.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import io.ktor.serialization.kotlinx.json.*
import kotlinx.serialization.Serializable
import org.slf4j.LoggerFactory

fun main() {
    val logger = LoggerFactory.getLogger("WebServer")
    val port = System.getenv("PORT")?.toIntOrNull() ?: 8083
    logger.info("Starting Day 3 web server on port {}", port)
    embeddedServer(Netty, port = port, module = Application::module).start(wait = true)
}

fun Application.module() {
    val logger = LoggerFactory.getLogger("WebModule")

    install(CORS) { anyHost() }
    install(ContentNegotiation) { json() }

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ sessionId
    val sessions = mutableMapOf<String, MutableList<ConversationMessage>>()

    routing {
        // Static UI
        staticIndex()

        route("/api") {
            post("/chat") {
                val req = call.receive<ChatRequest>()
                logger.info("Received chat request: sessionId={}, message={}", req.sessionId, req.message)

                try {
                    val sessionId = req.sessionId
                    val history = sessions.getOrPut(sessionId) { mutableListOf() }

                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                    history.add(ConversationMessage("user", req.message))

                    val provider = GeminiProvider()
                    val model = System.getenv("GEMINI_MODEL") ?: "gemini-2.0-flash"

                    val tools = ToolRegistry(emptyList())
                    val agent = Agent(
                        provider = provider,
                        model = model,
                        tools = tools,
                        systemInstruction = buildSystemPrompt(),
                        config = GenerationConfig(temperature = 0.7)
                    )

                    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
                    val conversationContext = buildConversationContext(history)
                    val response = agent.chatOnce(conversationContext)

                    logger.info("Agent response: {}", response)

                    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    history.add(ConversationMessage("assistant", response))

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –∞–≥–µ–Ω—Ç —Å–±–æ—Ä —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                    val isComplete = checkIfComplete(response)

                    call.respond(ChatResponse(
                        reply = response,
                        isComplete = isComplete
                    ))
                } catch (e: Exception) {
                    logger.error("Error processing chat request", e)
                    call.respond(ChatResponse(
                        reply = "–û—à–∏–±–∫–∞: ${e.message}",
                        isComplete = false
                    ))
                }
            }

            post("/reset") {
                val req = call.receive<ResetRequest>()
                sessions.remove(req.sessionId)
                logger.info("Session reset: {}", req.sessionId)
                call.respond(mapOf("status" to "ok"))
            }
        }
    }
}

private fun buildSystemPrompt(): String = """
–¢—ã ‚Äî –≤–æ–ª—à–µ–±–Ω—ã–π —Å–∫–∞–∑–æ—á–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Å–∫–∞–∑–æ—á–Ω—ã—Ö —É—Ç–æ–∫! ü¶Ü‚ú®

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ó–∞–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –µ–≥–æ —Å–∫–∞–∑–æ—á–Ω–æ–π —É—Ç–∫–µ
2. –°–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:
   - –í–Ω–µ—à–Ω–æ—Å—Ç–∏ —É—Ç–∫–∏ (—Ü–≤–µ—Ç –ø–µ—Ä—å–µ–≤, —Ä–∞–∑–º–µ—Ä, –æ—Å–æ–±—ã–µ —á–µ—Ä—Ç—ã)
   - –•–∞—Ä–∞–∫—Ç–µ—Ä–µ –∏ –ª–∏—á–Ω–æ—Å—Ç–∏ —É—Ç–∫–∏
   - –í–æ–ª—à–µ–±–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è—Ö –∏–ª–∏ —Ç–∞–ª–∞–Ω—Ç–∞—Ö
   - –ú–µ—Å—Ç–µ –æ–±–∏—Ç–∞–Ω–∏—è (–≤–æ–ª—à–µ–±–Ω—ã–π –ø—Ä—É–¥, –æ–±–ª–∞–∫–∞, –ø–æ–¥–≤–æ–¥–Ω–æ–µ —Ü–∞—Ä—Å—Ç–≤–æ –∏ —Ç.–¥.)
   - –õ—é–±–∏–º—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö –∏ —Ö–æ–±–±–∏
   - –î—Ä—É–∑—å—è—Ö –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö
3. –ö–æ–≥–¥–∞ —Å–æ–±–µ—Ä–µ—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 5-6 –¥–µ—Ç–∞–ª–µ–π), —Å–ø—Ä–æ—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "–£ –º–µ–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏! –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–π —Å–∫–∞–∑–æ—á–Ω–æ–π —É—Ç–∫–∏?"
4. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–µ–Ω, —Å–æ–∑–¥–∞–π –∫—Ä–∞—Å–æ—á–Ω–æ–µ —Å–∫–∞–∑–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

===–°–ö–ê–ó–û–ß–ù–ê–Ø –£–¢–ö–ê===

## ü¶Ü –ò–º—è —É—Ç–∫–∏
[–ø—Ä–∏–¥—É–º–∞–π –≤–æ–ª—à–µ–±–Ω–æ–µ –∏–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫]

## ‚ú® –í–Ω–µ—à–Ω–æ—Å—Ç—å
[—è—Ä–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞]

## üí´ –•–∞—Ä–∞–∫—Ç–µ—Ä
[–æ–ø–∏—Å–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞]

## ü™Ñ –í–æ–ª—à–µ–±–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
[–æ—Å–æ–±—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã –∏ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —É–º–µ–Ω–∏—è]

## üè∞ –ú–µ—Å—Ç–æ –æ–±–∏—Ç–∞–Ω–∏—è
[–æ–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∞–∑–æ—á–Ω–æ–≥–æ –¥–æ–º–∞]

## üé≠ –õ—é–±–∏–º—ã–µ –∑–∞–Ω—è—Ç–∏—è
[—Ö–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è]

## üìñ –°–∫–∞–∑–æ—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
[–∫–æ—Ä–æ—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö —É—Ç–∫–∏, 2-3 –∞–±–∑–∞—Ü–∞]

===–ö–û–ù–ï–¶ –°–ö–ê–ó–ö–ò===

–í–ê–ñ–ù–û:
- –°–æ–∑–¥–∞–≤–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
- –ó–∞–¥–∞–≤–∞–π –ø–æ 1-2 –≤–æ–ø—Ä–æ—Å–∞ –∑–∞ —Ä–∞–∑, —á—Ç–æ–±—ã –±–µ—Å–µ–¥–∞ –±—ã–ª–∞ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π
- –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º, –¥–æ–±—Ä—ã–º –∏ –≤–µ—Å—ë–ª—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –¥–∏–∞–ª–æ–≥ –±–æ–ª–µ–µ –∂–∏–≤—ã–º
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞—ë—Ç –º–∞–ª–æ –¥–µ—Ç–∞–ª–µ–π, –ø–æ–º–æ–≥–∏ –µ–º—É —Å–≤–æ–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
""".trimIndent()

private fun buildConversationContext(history: List<ConversationMessage>): String {
    return history.joinToString("\n\n") { msg ->
        when (msg.role) {
            "user" -> "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${msg.content}"
            "assistant" -> "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ${msg.content}"
            else -> msg.content
        }
    }
}

private fun checkIfComplete(response: String): Boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∞–∑–æ—á–Ω–æ–π —É—Ç–∫–∏
    return response.contains("===–°–ö–ê–ó–û–ß–ù–ê–Ø –£–¢–ö–ê===") &&
           response.contains("===–ö–û–ù–ï–¶ –°–ö–ê–ó–ö–ò===")
}

@Serializable
data class ConversationMessage(
    val role: String,
    val content: String
)

@Serializable
data class ChatRequest(
    val sessionId: String,
    val message: String
)

@Serializable
data class ChatResponse(
    val reply: String,
    val isComplete: Boolean
)

@Serializable
data class ResetRequest(val sessionId: String)